# -*- coding: utf-8 -*-
"""NER.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ENUcuL5ljlw063hMel6ws9eSv78qeu6c
"""

import torch
from transformers import AutoTokenizer, AutoModelForTokenClassification

# Load the ClinicalBERT tokenizer and model
tokenizer = AutoTokenizer.from_pretrained("emilyalsentzer/Bio_ClinicalBERT")
model = AutoModelForTokenClassification.from_pretrained("emilyalsentzer/Bio_ClinicalBERT", num_labels=3)

# Define example clinical text
text = "The patient was diagnosed with diabetes and hypertension."

# Tokenize the text and convert to input format
tokens = tokenizer.tokenize(text)
token_ids = tokenizer.convert_tokens_to_ids(tokens)
input_ids = torch.tensor([token_ids])
attention_mask = torch.tensor([[1] * len(token_ids)])
inputs = {"input_ids": input_ids, "attention_mask": attention_mask}

# Pass the input through the model and get the predicted labels
outputs = model(**inputs)
predicted_labels = torch.argmax(outputs.logits, axis=2)[0]

# Map the predicted labels back to the original tokenization and extract entities
entities = []
entity_labels = []
current_entity = ""
current_label = None
for i, label in enumerate(predicted_labels):
    if label == 1:
        if current_entity:
            entities.append(current_entity)
            entity_labels.append(current_label)
            current_entity = ""
            current_label = None
        current_entity = tokens[i]
        current_label = label
    elif i > 0 and label == 2 and predicted_labels[i-1] == 1:
        current_entity += f" {tokens[i]}"
    elif label == 2:
        if current_entity:
            entities.append(current_entity)
            entity_labels.append(current_label)
            current_entity = ""
            current_label = None

# If an entity is still being processed at the end of the text, append it
if current_entity:
    entities.append(current_entity)
    entity_labels.append(current_label)

# Print the predicted entities and their labels
for entity, label in zip(entities, entity_labels):
    print(f"{entity}: {label}")